# Created by newuser for 4.3.9

source /etc/zsh/zprofile

alias nano=vim
alias svn=colorsvn
alias td='todo -s +children'
alias t='task'
alias sdev='ssh dev'

export EDITOR=vim
#export PATH="/usr/libexec/cw:$PATH"

export VISUAL=vim
autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line
bindkey '^x^e' edit-command-line
bindkey '^xe' edit-command-line

# chars which zsh treat as part of word
export WORDCHARS="*?_-.[]~/:&!#$%^(){}\"|"


#export WORDCHARS="*?_-.[]~=&!#$%^(){}<>"
#autoload select-word-style
#select-word-style shell

#bindkey '^[[H' beginning-of-line
#bindkey '^[[F' end-of-line
#bindkey '^[[3' delete-char

export CW_NORANDOM=1
export CW_COLORIZE=brown:yellow
export CW_SHLVL=$SHLVL

export NMON=clvkm
alias nmon='nmon -s 1'

#export CW_COLORIZE=yellow:grey+:blue:cyan:red:magenta

# Colorize STDERR (buggy)
#exec 2>>(while read line; do
#  print '\e[91m'${(q)line}'\e[0m' > /dev/tty; print -n $'\0'; done &
#)

fgvim() {
    jobs -s %sudo\ vim >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        fg %sudo\ vim >/dev/null 2>&1
    else
        jobs -s %vim >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            fg %vim >/dev/null 2>&1
        fi
    fi
}

zle -N fgvim
bindkey '^Z' fgvim

# <F1> to run help or man
cmdhelp() {
    [ "$BUFFER" = "" ] && return

    lpart="${LBUFFER/*[ ,=\"]/}"    # grab everything from leftpart from right except some symbols
    rpart="${RBUFFER/[ ,=\"]*/}"    # grab everything from rightpart from left except some symbols

    word="${lpart}${rpart}"
    cmdl="${LBUFFER/*[;\|]/}"       # grab 'asd asd;[ this one ]'  (cut from ; or |)
    cmdr="${RBUFFER/[ ;\|]*/}"      # grab 'asd asd;  '        (first word, cut from ; or | if needed)
    cmd="${cmdl}${cmdr}"
    cmd="${cmd}"
    cmd="${cmd## }"                 # cut any space from beginning
    cmd="${cmd%% }"                 # cut any space from the end just to be sure :)
    cmd="${cmd/ */}"                # grab first word

    if [ 0 -eq 1 ]; then
        # debug
        zle push-input
        zle -U "x${word}xcmd:${cmd}"
        return
    fi

    if [ ! "$word" = "" ]; then
        # avoid searching for empty string
        search=" -c 'silent! / $word' -c 'silent! :normal n'"
    fi

    nb="${cmd} --help 2>&1 | nvimpager -a -- -c 'set syntax=man' $search"
    zsh -c "${nb[@]}"
}
zle -N cmdhelp
bindkey '^[OP' cmdhelp

#bindkey -s '^[OP' ' --help | nvimpager -a -- -c "set syntax=man" ^M'

bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word

# note: use "fc -R" for reloading history before search
bindkey '^R' history-incremental-search-backward
bindkey '^F' history-incremental-search-forward

bindkey '^T' history-incremental-pattern-search-backward

#bindkey '^G' history-incremental-pattern-search-forward

savefullhist() {
    local C=${1%%$'\n'}
    C=${C#${C%%[![:space:]]*}}
    C=${C%${C##*[![:space:]]}}
    [ -z "$C" ] && return
    [ -x ~/bin/savehist ] && ~/bin/savehist "$C"
}

# dont remember that was needed. But this will rewrite .history_full every command
# written. So, disabled
#add-zsh-hook zshaddhistory savefullhist


# Disable C-s/C-q flow control completely
stty -ixon

# Add wakatime plugin
#source ~/.local/share/zsh/plug/wakatime/wakatime.plugin.zsh

tmux_session() {
    local session_name="$1"
    [[ -z $session_name ]] && session_name=default
    local dbusid="$KONSOLE_DBUS_SERVICE"
    local stampfile="/tmp/${session_name}_tmux_dbus_session_id"
    local attach=0

    # Mangle backspace
    # stty ek

    if [ -z "$TMUX" ]; then
        tmux has-session -t "$session_name"
        if [ "$?" -eq 0 ]; then
            # if we have some clients attached to session
            # and stamp file exists and its contents match our
            # current dbus session id -- dont attach. Probably we
            # opened tab in same terminal application.
            [[ \
                "$(tmux list-clients -t "$session_name")" != "" && \
                -f "$stampfile" && \
                "$(cat "$stampfile")" == "$dbusid" \
            ]] && return
            attach=1
        fi

        # Store dbus session id in stamp, since we definitely will
        # open tmux session now
        [[ ! -z $dbusid ]] && echo "$dbusid" > "$stampfile"

        if [[ $attach -eq 1 ]]; then
            tmux attach -t "$session_name"
        else
            tmux new -s "$session_name"
        fi

        local rcode=$?

        # Drop stamp file if we were last active client connected to session
        tmux list-clients -t "$session_name"
        [[ "$(tmux list-clients -t "$session_name")" == "" ]] && rm -f "$stampfile"

        exit $rcode
    fi
}

tmux_update_environment() {
    local updated=0
    local removed=0

    for opt in $(tmux show-environment); do
        if [[ $(echo $opt | cut -c 1) == - ]]; then
            unset "${opt#-}"
            let removed+=1
        else
            eval $opt
            let updated+=1
        fi
    done

    echo "Updated: $updated; removed: $removed"
}

#[[ $YAKUAKE == 1 || $ALACRITTYQUAKE == 1 ]] && tmux_session yakuake
if [[ $SHELL_WORK_SKYNET == 1 ]]; then
    unset SHELL_WORK_SKYNET
    tmux_session skynet
elif [[ $SHELL_WORK_SKYNETBIN == 1 ]]; then
    unset SHELL_WORK_SKYNETBIN
    tmux_session skynetbin
elif [[ $SHELL_WORK_SKYNETCOPIER == 1 ]]; then
    unset SHELL_WORK_SKYNETCOPIER
    tmux_session skynetcopier
fi

#export PATH="$PATH:/home/mocksoul/Downloads/htcone/adt-bundle-linux-x86-20130522/sdk/platform-tools"
export PATH="$HOME/.local/bin:$PATH"

alias sshome='ssh home'
alias sshomem='ssh mocksoul@home'

#alias vim='TERM=xterm-256color nvim -u ~/.vimrc'
alias vi='vim'

function git() {
    if [ "$1" = "merge" ] && [[ "$@" != *"--help" ]] ; then
        shift 1;
        command git mockmerge "$@"
    elif [ "$1" = "stockmerge" ]; then
        shift 1;
        command git merge "$@"
    else
        command git "$@"
    fi
}

alias gi='git'
alias lg='lazygit'

export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"

alias pager='eval $PAGER'

export VIMCONF=~/.config/nvim/init.vim
export VIMLUA=~/.config/nvim/lua/main.lua

function syncvim() {
    if [ ! "$1" = "" ]; then
        hosts=($@)
    else
        hosts=(home nas nas2 nas3 nas421 nas361 nas362)
    fi

    for h in $hosts; do
        echo "syncing $h..."
        ssh $h 'rm -rf .vimrc .config/vim .config/nvim .local/share/nvim /usr/local/share/nvimpager && mkdir -p .config/nvim .local/share/nvim /usr/local/share' && \
            rsync -a --delete ~/.config/nvim/. $h:.config/nvim/ && \
            rsync -a --delete ~/.local/share/nvim $h:.local/share/ && \
            rsync -a /usr/local/share/nvimpager $h:/usr/local/share/ && \
            rsync -a /usr/local/bin/nvimpager $h:/usr/local/bin/nvimpager && \
            ssh $h "ln -snf ~/.config/nvim/init.vim ~/.vimrc" &&
            ssh $h "sed -i -s '/Plug.*waka/d' ~/.config/nvim/init.vim";
    done
}

function syncfile() {
    fn="$1"
    fn=$(realpath "$fn")

    for h in home nas nas2 nas3 nas421 nas361 nas362; do
        echo -n "$h: $fn:  "
        rsync -a "$1" $h:$1 && echo OK
    done
}
